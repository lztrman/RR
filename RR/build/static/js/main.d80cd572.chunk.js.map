{"version":3,"sources":["Room.js","App.js","serviceWorker.js","index.js"],"names":["Room","props","componentDidMount","console","log","roomId","type","socket","io","path","query","on","success","createData","room","sendToServer","joinData","sdp","id","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","navigator","mediaDevices","getUserMedia","audio","video","then","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","React","createRef","candidates","style","width","height","margin","backgroundColor","ref","this","autoPlay","onClick","Component","App","createRoom","document","getElementById","value","setState","inRoom","joinRoom","state","roomRef","nameRef","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d80cd572.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nclass Room extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n    this.roomId = this.props.roomId\n    this.type = this.props.type\n\n    this.socket = null\n    this.candidates = []\n  }\n\n  componentDidMount = () => {\n\n    console.log(\"this room room id is \" + this.roomId)\n    console.log(\"this room type is \" + this.type)\n\n    this.socket = io(\n      '/admin',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n    \n    this.socket.on('connection-success', success => {\n      \n      if (this.type === \"create\") { \n        var createData = { \n          room: this.roomId\n        }\n        this.sendToServer(\"createRoom\", createData)\n      } else if(this.type === \"join\") { \n        var joinData = { \n          room: this.roomId \n        }\n        this.sendToServer(\"joinRoom\", joinData)\n      }\n      console.log('connection success')\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n    // set sdp as remote description \n    console.log('Setting remote description by ' + this.socket.id)\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      console.log('Adding ice candidate by ' + this.socket.id + 'and the candidate is ' + candidate)\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        console.log('Sending candidate from '+ this.socket.id + ' to server ')\n        this.sendToServer('candidate', e.candidate)\n      }\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n        console.log('Get user media success by ' + this.socket.id)\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: false,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToServer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n  createOffer = () => {\n    console.log('Offer')\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToServer('offerOrAnswer', sdp)\n        console.log('Sending offer to server by ' + this.socket.id)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n        this.sendToServer('offerOrAnswer', sdp)\n        console.log('Sending answer to server by ' + this.socket.id)\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.localVideoref }\n          autoPlay>\n        </video>\n       \n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n        \n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n        \n      </div>\n    )\n  }\n}\n\nexport default Room;","import React, { Component } from \"react\";\nimport io from 'socket.io-client'\nimport Room from \"./Room\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      inRoom: false, \n      \n    };\n    this.roomId = null; \n    this.type = null; \n    this.roomRef = React.createRef();\n    this.nameRef = React.createRef();\n  }\n\n  \n\n  componentDidMount = () => {\n    this.socket = io(\n      '/admin',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n  };\n\n  createRoom = () => {\n    console.log(\"create room function called. \");\n    this.roomId = document.getElementById(\"roomTf\").value \n    console.log(\"this app room id is \" + this.roomId)\n    this.type = \"create\"\n    console.log(\"this app type is \" + this.type)\n    this.setState({ inRoom: true });\n  };\n\n  joinRoom = () => {\n    console.log(\"join room function called. \");\n    this.roomId = document.getElementById(\"roomTf\").value \n    console.log(\"this app room id is \" + this.roomId)\n    this.type = \"join\"\n    console.log(\"this app type is \" + this.type)\n    this.setState({ inRoom: true });\n  };\n\n  render() {\n    switch (this.state.inRoom) {\n      case true:\n        return (\n          <div>\n            <Room type = {this.type} roomId = {this.roomId}/>\n          </div>\n        );\n      case false:\n        return (\n          <div>\n            <h1>Welcome to Red Rhinoceros! </h1>\n            <p> please enter room number </p>\n            <input type=\"text\" ref={this.roomRef} id=\"roomTf\" />\n            <p> please enter your name </p>\n            <input type=\"text\" ref={this.nameRef} id=\"nameTf\" />\n            {/* <button onClick={this.createRoom} id=\"ceateBtn\">\n              CREATE ROOM\n            </button> */}\n            <button onClick={this.joinRoom} id=\"joinBtn\">\n              JOIN ROOM\n            </button>\n          </div>\n        );\n      default:\n        return (\n          <div id=\"error\">\n            <h1> this really should not happen </h1>\n          </div>\n        );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}