{"version":3,"sources":["Room.js","App.js","serviceWorker.js","index.js"],"names":["Room","props","componentDidMount","console","log","roomId","type","socket","io","path","query","on","success","createData","room","sendToServer","joinData","sdp","id","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","navigator","mediaDevices","getUserMedia","audio","video","then","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","React","createRef","candidates","this","style","width","height","margin","backgroundColor","ref","autoPlay","onClick","Component","App","createRoom","document","getElementById","value","setState","inRoom","joinRoom","state","roomRef","nameRef","class","size","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5f0ca7e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport io from 'socket.io-client'\r\n\r\nclass Room extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // https://reactjs.org/docs/refs-and-the-dom.html\r\n    this.localVideoref = React.createRef()\r\n    this.remoteVideoref = React.createRef()\r\n    this.roomId = this.props.roomId\r\n    this.type = this.props.type\r\n\r\n    this.socket = null\r\n    this.candidates = []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    console.log(\"this room room id is \" + this.roomId)\r\n    console.log(\"this room type is \" + this.type)\r\n\r\n    this.socket = io(\r\n      '/admin',\r\n      {\r\n        path: '/webrtc',\r\n        query: {}\r\n      }\r\n    )\r\n    \r\n    this.socket.on('connection-success', success => {\r\n      \r\n      if (this.type === \"create\") { \r\n        var createData = { \r\n          room: this.roomId\r\n        }\r\n        this.sendToServer(\"createRoom\", createData)\r\n      } else if(this.type === \"join\") { \r\n        var joinData = { \r\n          room: this.roomId \r\n        }\r\n        this.sendToServer(\"joinRoom\", joinData)\r\n      }\r\n      console.log('connection success')\r\n    })\r\n\r\n    this.socket.on('offerOrAnswer', (sdp) => {\r\n    // set sdp as remote description \r\n    console.log('Setting remote description by ' + this.socket.id)\r\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n    })\r\n\r\n    this.socket.on('candidate', (candidate) => {\r\n      // console.log('From Peer... ', JSON.stringify(candidate))\r\n      console.log('Adding ice candidate by ' + this.socket.id + 'and the candidate is ' + candidate)\r\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n    })\r\n\r\n    const pc_config = {\r\n      \"iceServers\": [\r\n        // {\r\n        //   urls: 'stun:[STUN_IP]:[PORT]',\r\n        //   'credentials': '[YOR CREDENTIALS]',\r\n        //   'username': '[USERNAME]'\r\n        // },\r\n        {\r\n          urls : 'stun:stun.l.google.com:19302'\r\n        }\r\n      ]\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\r\n    // create an instance of RTCPeerConnection\r\n    this.pc = new RTCPeerConnection(pc_config)\r\n\r\n    // triggered when a new candidate is returned\r\n    this.pc.onicecandidate = (e) => {\r\n      // send the candidates to the remote peer\r\n      // see addCandidate below to be triggered on the remote peer\r\n      if (e.candidate) {\r\n        // console.log(JSON.stringify(e.candidate))\r\n        console.log('Sending candidate from '+ this.socket.id + ' to server ')\r\n        this.sendToServer('candidate', e.candidate)\r\n      }\r\n    }\r\n\r\n    // triggered when there is a change in connection state\r\n    this.pc.oniceconnectionstatechange = (e) => {\r\n      console.log(e)\r\n    }\r\n\r\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n    this.pc.onaddstream = (e) => {\r\n      this.remoteVideoref.current.srcObject = e.stream\r\n    }\r\n\r\n    // called when getUserMedia() successfully returns - see below\r\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\r\n    const success = (stream) => {\r\n        console.log('Get user media success by ' + this.socket.id)\r\n      window.localStream = stream\r\n      this.localVideoref.current.srcObject = stream\r\n      this.pc.addStream(stream)\r\n    }\r\n\r\n    // called when getUserMedia() fails - see below\r\n    const failure = (e) => {\r\n      console.log('getUserMedia Error: ', e)\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n    // see the above link for more constraint options\r\n    const constraints = {\r\n      audio: false,\r\n      video: true,\r\n      // video: {\r\n      //   width: 1280,\r\n      //   height: 720\r\n      // },\r\n      // video: {\r\n      //   width: { min: 1280 },\r\n      // }\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(success)\r\n      .catch(failure)\r\n  }\r\n\r\n  sendToServer = (messageType, payload) => {\r\n    this.socket.emit(messageType, {\r\n      socketID: this.socket.id,\r\n      payload\r\n    })\r\n  }\r\n\r\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\r\n  createOffer = () => {\r\n    console.log('Offer')\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\r\n    // initiates the creation of SDP\r\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        // set offer sdp as local description\r\n        this.pc.setLocalDescription(sdp)\r\n\r\n        this.sendToServer('offerOrAnswer', sdp)\r\n        console.log('Sending offer to server by ' + this.socket.id)\r\n    })\r\n  }\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\r\n  // creates an SDP answer to an offer received from remote peer\r\n  createAnswer = () => {\r\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        // set answer sdp as local description\r\n        this.pc.setLocalDescription(sdp)\r\n        this.sendToServer('offerOrAnswer', sdp)\r\n        console.log('Sending answer to server by ' + this.socket.id)\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <p>{this.roomId}</p>\r\n        <br></br>\r\n        <video\r\n          style={{\r\n            width: 240,\r\n            height: 240,\r\n            margin: 5,\r\n            backgroundColor: 'black'\r\n          }}\r\n          ref={ this.localVideoref }\r\n          autoPlay>\r\n        </video>\r\n       \r\n        <video\r\n          style={{\r\n            width: 240,\r\n            height: 240,\r\n            margin: 5,\r\n            backgroundColor: 'black'\r\n          }}\r\n          ref={ this.remoteVideoref }\r\n          autoPlay>\r\n        </video>\r\n        <br />\r\n        \r\n        <button onClick={this.createOffer}>Offer</button>\r\n        <button onClick={this.createAnswer}>Answer</button>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Room;","import React, { Component } from \"react\";\r\nimport io from 'socket.io-client'\r\nimport Room from \"./Room\";\r\nimport {Button, Input} from \"antd\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      inRoom: false, \r\n      \r\n    };\r\n    this.roomId = null; \r\n    this.type = null; \r\n    this.roomRef = React.createRef();\r\n    this.nameRef = React.createRef();\r\n  }\r\n\r\n  \r\n\r\n  componentDidMount = () => {\r\n    this.socket = io(\r\n      '/admin',\r\n      {\r\n        path: '/webrtc',\r\n        query: {}\r\n      }\r\n    )\r\n  };\r\n\r\n  createRoom = () => {\r\n    console.log(\"create room function called. \");\r\n    this.roomId = document.getElementById(\"roomTf\").value \r\n    console.log(\"this app room id is \" + this.roomId)\r\n    this.type = \"create\"\r\n    console.log(\"this app type is \" + this.type)\r\n    this.setState({ inRoom: true });\r\n  };\r\n\r\n  joinRoom = () => {\r\n    console.log(\"join room function called. \");\r\n    this.roomId = document.getElementById(\"roomTf\").value \r\n    console.log(\"this app room id is \" + this.roomId)\r\n    this.type = \"join\"\r\n    console.log(\"this app type is \" + this.type)\r\n    this.setState({ inRoom: true });\r\n  };\r\n\r\n  render() {\r\n    switch (this.state.inRoom) {\r\n      case true:\r\n        return (\r\n          <div>\r\n            <Room type = {this.type} roomId = {this.roomId}/>\r\n          </div>\r\n        );\r\n      case false:\r\n        return (\r\n          <div>\r\n            <h1 class = \"App\">Welcome to Red Rhinoceros! </h1>\r\n            <p class = \"App\"> please enter room number </p>\r\n            <Input class = \"App\" type=\"text\" ref={this.roomRef} size = \"large\" value = \"Room Number\"/>\r\n            <p class = \"App\"> please enter your name </p>\r\n            <Input class = \"App\" type=\"text\" ref={this.nameRef} size = \"large\" value = \"Your Name\"/>\r\n            <br/>\r\n            <Button type = \"primary\" onClick={this.createRoom} id=\"ceateBtn\">\r\n              CREATE ROOM\r\n            </Button>\r\n            <br/>\r\n            <Button type = \"primary\" onClick={this.joinRoom} id=\"joinBtn\">\r\n              JOIN ROOM\r\n            </Button>\r\n            \r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div id=\"error\">\r\n            <h1> this really should not happen </h1>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}